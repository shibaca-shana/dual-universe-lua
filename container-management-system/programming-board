
{"slots":{"0":{"name":"screen","type":{"events":[],"methods":[]}},"1":{"name":"Ore","type":{"events":[],"methods":[]}},"2":{"name":"PureOre","type":{"events":[],"methods":[]}},"3":{"name":"MiningUnitContainer","type":{"events":[],"methods":[]}},"4":{"name":"BuildingMaterials","type":{"events":[],"methods":[]}},"5":{"name":"AnotherContainer","type":{"events":[],"methods":[]}},"6":{"name":"slot7","type":{"events":[],"methods":[]}},"7":{"name":"slot8","type":{"events":[],"methods":[]}},"8":{"name":"slot9","type":{"events":[],"methods":[]}},"9":{"name":"slot10","type":{"events":[],"methods":[]}},"-1":{"name":"unit","type":{"events":[],"methods":[]}},"-2":{"name":"system","type":{"events":[],"methods":[]}},"-3":{"name":"library","type":{"events":[],"methods":[]}}},"handlers":[{"code":"\nupdateData()","filter":{"args":[{"value":"update"}],"signature":"tick(timerId)","slotKey":"-1"},"key":"0"},{"code":"\ncontainerOverview = {}\n\ncontainerItemList = {}\n\nfunction sortByQuantityAndReturnTenHighest(itemList)\n    highestQuatityItemsList = {}\n    if itemList then\n        \n        table.sort(itemList, function(a,b) return a['quantity']*a['unitVolume'] > b['quantity']*b['unitVolume'] end)\n        \n        local counter = 0\n        for _, item in ipairs(itemList) do\n            newItem = {}\n            newItem['name'] = item['name']\n            newItem['mass'] = item['quantity']*item['unitMass']\n            newItem['volume'] = item['quantity']*item['unitVolume']\n            counter = counter+1\n            highestQuatityItemsList[counter] = newItem\n            if counter == 10 then\n                break\n            end\n        end\n    end\n    return highestQuatityItemsList\nend\n\n-- iterates over all slots to find the connected containers and their contents\n-- Container name will be the configured slot name\nfunction updateData()\n    -- update data\n    for slotName, slot in pairs(unit) do\n        if slot ~= nil and type(slot) == 'table' and type(slot.export) == 'table' and slot.getElementClass ~= nil and slot.getElementClass() ~= nil and string.match(slot.getElementClass(), 'Container') then        \n            if containerOverview[slot.getId()] == nil then\n                containerOverview[slot.getId()] = {}\n                containerOverview[slot.getId()][\"name\"] = slotName\n                containerItemList[slot.getId()] = {}\n                containerItemList[slot.getId()][\"name\"] = slotName\n                -- acquireStorage\n                slot.acquireStorage()\n            end\n            containerOverview[slot.getId()][\"maxVolume\"] = slot.getMaxVolume()\n            containerOverview[slot.getId()][\"totalMass\"] = slot.getItemsMass()+slot.getSelfMass()\n            containerOverview[slot.getId()][\"itemsVolume\"] = slot.getItemsVolume()\n            containerItemList[slot.getId()][\"maxVolume\"] = slot.getMaxVolume()\n            if slot.getItemsList() then\n                containerItemList[slot.getId()][\"items\"] = sortByQuantityAndReturnTenHighest(json.decode(slot.getItemsList()))\n            end\n        end\n    end\nend\n\n\nfunction setScreenOverviewData()\n    local scriptInput = {}\n    scriptInput['SHOW_OVERVIEW'] = containerOverview\n    screen.setScriptInput(json.encode(scriptInput))\nend\n    \nfunction setScreenItemsList(containerId)\n    if containerId and tonumber(containerId) then\n        local container = containerItemList[tonumber(containerId)]\n        local scriptInput = {}\n        scriptInput['SHOW_ITEMS_LIST'] = container\n        screen.setScriptInput(json.encode(scriptInput))\n    end\nend\n\n-----------------------------------------------\n\nupdateData()\nsetScreenOverviewData()\n\n\n-- update data every 10 seconds\nunit.setTimer('update', 10)","filter":{"args":[],"signature":"start()","slotKey":"-1"},"key":"1"},{"code":"\nlocal output = screen.getScriptOutput()\n\nif output then\n    local screenOutput = json.decode(output)\n    if screenOutput and screenOutput['command'] == 'SHOW_ITEMS_LIST' then\n        setScreenItemsList(screenOutput['id'])\n    elseif screenOutput and screenOutput['command'] == 'SHOW_OVERVIEW' then\n        setScreenOverviewData()\n    end\nend\n\nscreen.clearScriptOutput()","filter":{"args":[],"signature":"update()","slotKey":"-2"},"key":"2"}],"methods":[],"events":[]}
